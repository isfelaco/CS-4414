hi! i uploaded what should be all of the files that i edited so you can copy paste them onto your own machine (i didn't want to deal with trying to compress everything on the portal and then transferring it over to github on my own computer, but if this is inconvenient for you i can try a different way next time)
right now it doesn't compile correctly because of an issue with the getprocessesinfo() function that i explain lower down


WHAT I DID:
- add int tickets to the process struct
- add int timesscheduled to the process struct 

- create a rough settickets() function that should change the number of tickets a process has (in sysproc.c, also added to syscall.h, usys.S, and syscall.c)

- created a prototype for getprocessesinfo() function (in sysproc.c, also added to syscall.h, usys.S, and syscall.c) (for sure does not work right now)

- created an empty helper function for getprocessesinfo() in proc.c (also added prototype to defs.h to allow for usage in sysproc.c)

- created the processesinfo.h file with the processes_info struct inside
- included processesinfo.h in the defs.h file (unsure if this is correct? allows it to be accessed from sysproc.c)

TO DO: 
- figure out how to count times a process is scheduled (timesscheduled) (will probably be in the scheduler or similar in proc.c)

- test to make sure settickets() works (test files in link in instructions, need to add to Makefile)

- figure out where to #include the processesinfo.h file so it is accessible to kernel and user processes? (right now it is included in defs.h)

- test to make sure getprocessesinfo() works

- do the scheduling itself
> each process starts with 10 tickets (add to userinit() function probably)
> children inherit their parent's tickets (check fork() function?)
> edit scheduler itself to use a given random number generator, mod it, and pick a process to run (go through list of runnable processes in a loop and keep comparing the random number to the accumulated # of tickets, run the one it lands on)


NOTES: 
to check for runnable processes you can use: process->state == RUNNABLE
for tickets, should be able to use process->tickets 
^^ you can see all of the parts of a process in the proc struct in proc.h
can use argptr() to get the argument for getprocessesinfo() (but how??)
can use myproc() to access current process